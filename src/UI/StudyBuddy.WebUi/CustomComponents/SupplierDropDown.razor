@using StudyBuddy.WebUi.Models
@using StudyBuddy.WebUi.CustomException
@using Blazored.Typeahead
@if (userList == null)
{
    <p>
        <em>
            @_loadingMessage
        </em>
    </p>
}
else
{
    <BlazoredTypeahead SearchMethod="@searchUserlist"
                       TValue="UserDto"
                       TItem="UserDto"
                       Value="selectedUser"
                       ValueChanged="selectedUserChanged"
                       placeholder="Search by user name"
                       ShowDropDownOnFocus="true"
                       EnableDropDown="true"
                       Debounce="500"
    >
        <SelectedTemplate>
            @context.userName
        </SelectedTemplate>
        <ResultTemplate>
            @context.userName (@context.email)
        </ResultTemplate>
    </BlazoredTypeahead>

}



@code
{

    [Parameter]
    public Guid Value { get; set; }
    [Parameter]
    public EventCallback<Guid> ValueChanged { get; set; }

    [Inject]
    HttpClient Client { get; set; }

    List<UserDto> userList;
    UserDto selectedUser = new UserDto();
    String _loadingMessage = "Loading";
    protected override async void OnInitialized()
    {
        try
        {
            userList = (await Client.GetServiceResponseAsync<List<UserDto>>("https://localhost:7042/api/user/all/100/1", true)).Data!;

        }
        catch (ApiException e)
        {

            _loadingMessage = "Loading Errror";
            
        }
    }

    private Task selectedUserChanged(UserDto Users)
    {
        if (Users == null)
        {
            return ValueChanged.InvokeAsync(Guid.Empty);
        }
        selectedUser = Users;
        Value = Users.Id;
        return ValueChanged.InvokeAsync(Users.Id);
    }

    async Task<IEnumerable<UserDto>> searchUserlist(String searchText)
    {
        return await Task.FromResult(userList.Where(i => i.userName.ToUpper().Contains(searchText.ToUpper())).ToList());
    }
    

}
