@page "/"
@using StudyBuddy.WebUi.Models
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (supplierList == null)
{
    <p>
        <em>
            @loadingMessage
        </em>
    </p>
}
else
{
    <BlazoredTypeahead SearchMethod="@searchSupplier"
                       TValue="TagDto"
                       TItem="TagDto"
                       Value="selectedSupplier"
                       ValueChanged="SelectedSupplierChanged"
                       placeholder="Search by supplier name"
                       ShowDropDownOnFocus="true"
                       EnableDropDown="true"
                       Debounce="500">
        <SelectedTemplate>
            @context.Name
        </SelectedTemplate>
        <ResultTemplate>
            @context.Name)
        </ResultTemplate>
        <NotFoundTemplate>
            Sorry, there weren't any search results.
        </NotFoundTemplate>
    </BlazoredTypeahead>
}





@code {

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Inject]
    HttpClient Client { get; set; }

    List<TagDto> supplierList;
    TagDto selectedSupplier = new ();

    String loadingMessage = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        var res = (await Client.GetServiceResponseAsync<List<TagDto>>("https://localhost:7042/api/Tag/all", true));
        if (res.StatusCode != 200)
        {
            Console.WriteLine(res.Error.Errors.First());
        }
        else
        {
            supplierList = res.Data;
            foreach (var item in res.Data)
            {
                Console.WriteLine(item.Name);
            }
        }
    }

    private Task SelectedSupplierChanged(TagDto tag)
    {
        if (tag == null)
        {
            return ValueChanged.InvokeAsync(string.Empty);
        }

        selectedSupplier = tag;
        Value = tag.Name;

        return ValueChanged.InvokeAsync(tag.Name);
    }


    async Task<IEnumerable<TagDto>> searchSupplier(String searchText)
    {
        return await Task.FromResult(supplierList.Where(i => i.Name.ToUpper().Contains(searchText.ToUpper())).ToList());
    }
}

  