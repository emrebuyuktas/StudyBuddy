@using StudyBuddy.WebUi.Models
@using StudyBuddy.WebUi.CustomException
@using Blazored.Typeahead
@using StudyBuddy.Application.Dtos
@if (classroomList == null)
{
    <p>
        <em>
            @_loadingMessage
        </em>
    </p>
}
else
{
    <BlazoredTypeahead SearchMethod="@searchUserlist"
                       TValue="ClassroomListDto"
                       TItem="ClassroomListDto"
                       Value="selectedUser"
                       ValueChanged="selectedUserChanged"
                       placeholder="Search by user name"
                       ShowDropDownOnFocus="true"
                       EnableDropDown="true"
                       Debounce="500"
    >
        <SelectedTemplate>
            @context.Name
        </SelectedTemplate>
        <ResultTemplate>
            @context.Name (@context.Tags)
        </ResultTemplate>
    </BlazoredTypeahead>

}



@code
{

    [Parameter]
    public Guid Value { get; set; }
    [Parameter]
    public EventCallback<Guid> ValueChanged { get; set; }

    [Inject]
    HttpClient Client { get; set; }

    List<ClassroomListDto> classroomList;
    ClassroomListDto selectedUser = new ClassroomListDto();
    String _loadingMessage = "Loading";
    protected override async void OnInitialized()
    {
        try
        {
            classroomList = (await Client.GetServiceResponseAsync<List<ClassroomListDto>>("https://localhost:7042/api/classroom/related", true)).Data!;

        }
        catch (ApiException e)
        {

            _loadingMessage = "Loading Errror";
            
        }
    }

    private Task selectedUserChanged(ClassroomListDto Class)
    {
        if (Class == null)
        {
            return ValueChanged.InvokeAsync(Guid.Empty);
        }
        selectedUser = Class;
        Value = Class.Id;
        return ValueChanged.InvokeAsync(Class.Id);
    }

    async Task<IEnumerable<ClassroomListDto>> searchUserlist(String searchText)
    {
        return await Task.FromResult(classroomList.Where(i => i.Name.ToUpper().Contains(searchText.ToUpper())).ToList());
    }
    

}
