@page "/classes"
@using StudyBuddy.WebUi.Models
@using StudyBuddy.Application.Dtos
@using System.Net.Http.Headers
@using MudBlazor
<style>
 
    .card {
        border: none;
        border-radius: 10px
    }
    
    .c-details span {
        font-weight: 300;
        font-size: 13px
    }
      
    .badge button {
        background-color: red;
        width: 60px;
        height: 25px;
        padding-bottom: 3px;
        border-radius: 5px;
        display: flex;
        color: white;
        justify-content: center;
        align-items: center
    }
    
    .progress {
        height: 10px;
        border-radius: 10px
    }
    
    .progress div {
        background-color: red
    }
    
    .text1 {
        font-size: 14px;
        font-weight: 600
    }
    
    .text2 {
        color: #a5aec0
    }
</style>
<div class="container mt-5 mb-3">
    <div class="row">
        <h3>Classrooms</h3>
        @if(_userClassroomDtos.Count>0){
        
        @foreach (var item in _userClassroomDtos)
        {


            <div class="col-md-4">
                <div class="card p-3 mb-2" style="background-color: #c5e8ef">
                    <div class="d-flex justify-content-between">
                        <div class="d-flex flex-row align-items-center">
                            <div class="ms-2 c-details">
                                <h6 class="mb-0">@item.Tag.Name</h6>
                            </div>
                        </div>
                        <div class="badge">
                            <button class="btn btn-info btn-block" @onclick="@(()=> classroomProcess(@item.ClassroomId))" id="@item.ClassroomId" >Enter</button>
                        </div>
                    </div>
                    <div class="mt-5">
                        <h3 class="heading">@item.ClassroomName</h3>
                        <div class="mt-5">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar" style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                            <div class="mt-3">
                                <span class="text1">32 Applied <span class="text2">of 50 capacity</span></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>



        }}

    <MudPagination ControlButtonClicked="async () => await GetData()" Color="Color.Primary" Count="@totalPage" @bind-Selected="@_selected"/>
    
    <MudText Align="Align.Center">Selected page: @_selected</MudText>

    
    </div>
</div>

@code {
    
    private int totalPage = 1;
    private int currentPage = 1;
    private int pageSize = 9;
    private int _selected = 1;
    
    
    [CascadingParameter]
    IModalService Modal { get; set; }

    [Inject]
    HttpClient? Client { get; set; }

    [Inject]
    NavigationManager? NavManager { get; set; }

    [Inject]
    ModalManager? ModalManager { get; set; }

    [Inject]
    ILocalStorageService? LocalStorageService { get; set; }
    
    List<UserClassroomDto> _userClassroomDtos=new ();
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    


    String loadingMessage = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        if (authState.User.Identity.IsAuthenticated)
        {
    
            await GetData();

        }
        else
        {
            NavManager?.NavigateTo("/login");
            
        }
        
    }

    private async Task GetData()
    {
        var token= await LocalStorageService.GetItemAsync<string>("token");
        
        Client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        
        var httpRequest = (await Client.GetServiceResponseAsync<List<UserClassroomDto>>($"https://localhost:7042/api/Classroom/user/{pageSize}/{_selected}", true));
        
        
        if (httpRequest.StatusCode != 200)
        {
            Console.WriteLine(httpRequest.Error.Errors.First());
        }
        else
        {
            _userClassroomDtos = httpRequest.Data;

            totalPage = (int)httpRequest.TotalPage;
        }
    }
    private async Task classroomProcess(string id)
    {
        
        NavManager
            .NavigateTo($"/try/{id}");

    }
    
}