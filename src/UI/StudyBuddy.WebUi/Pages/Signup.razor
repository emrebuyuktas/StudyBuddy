@page "/signup"

@using StudyBuddy.WebUi.Models
@using StudyBuddy.WebUi.Utils
@using StudyBuddy.WebUi.Wrappers
@using System.Net.Http.Headers
@layout StudyBuddy.WebUi.Shared.EmptyLayout

<div class="container-fluid h-100">
    <div class="row justify-content-center align-items-center h-100">

        <div class="col col-sm-6 col-md-6 col-lg-4 col-xl-3">

            @* <EditForm Model="@_signupDto" OnValidSubmit="signUpProcess"> *@
            @*     <DataAnnotationsValidator/> *@
            @* *@
            @*     <div class="container"> *@
            @*         <div class="col align-items-center"> *@
            @*             <div class="form-group row-4"> *@
            @*                 <input @bind-value="_signupDto.UserName" class="form-control form-control-lg" type="text" placeholder="User Name"/> *@
            @*             </div> *@
            @*             <br/> *@
            @*             <div class="form-group row-4"> *@
            @*                 <input @bind-value="_signupDto.Email" class="form-control form-control-lg" type="text" placeholder="E-Mail Address"/> *@
            @*             </div> *@
            @*             <br/> *@
            @* *@
            @*             <div class="form-group row-4"> *@
            @*                 <input @bind-value="_signupDto.Password" class="form-control form-control-lg" type="password" placeholder="Password"/> *@
            @*             </div> *@
            @*             <br/> *@
            @*             <div class="form-group row-4" align="right"> *@
            @*                 <button class="btn btn-info btn-block">SignUp</button> *@
            @*             </div> *@
            @*         </div> *@
            @*     </div> *@
            @* </EditForm> *@

            <form Model="@_signupDto" OnValidSubmit="signUpProcess">
                <div class="row mb-3">
                    <label for="inputName3" class="col-sm-2 col-form-label">Name</label>
                    <div class="col-sm-10">
                        <input @bind-value="_signupDto.UserName" type="text" class="form-control" id="inputName3">
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="inputEmail3" class="col-sm-2 col-form-label">E-mail</label>
                    <div class="col-sm-10">
                        <input @bind-value="_signupDto.Email" type="text" class="form-control" id="inputEmail3">
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="inputPassword3" class="col-sm-2 col-form-label">Password</label>
                    <div class="col-sm-10">
                        <input @bind-value="_signupDto.Password" type="password" class="form-control" id="inputPassword3">
                    </div>
                </div>
                <fieldset class="row mb-3">
                    <legend class="col-form-label col-sm-2 pt-0">Tags</legend>
                    <div class="col-sm-10">
                        <StudyBuddy.WebUi.CustomComponents.SupplierDropDown/>
                    </div>


                </fieldset>
                <button type="submit" class="btn btn-primary">Sign in</button>
            </form>
            
            
            

        </div>

    </div>
</div>

@code {

    [Inject]
    HttpClient? Client { get; set; }

    [Inject]
    NavigationManager? NavManager { get; set; }

    [Inject]
    ModalManager? ModalManager { get; set; }

    [Inject]
    ILocalStorageService? LocalStorageService { get; set; }

    [Inject]
    AuthenticationStateProvider? AuthenticationStateProvider { get; set; }

    private SignupDto _signupDto = new();

    private async Task signUpProcess()
    {
        var httpRequest = await Client.PostGetServiceResponseAsync<UserDto, SignupDto>("https://localhost:7042/api/Auth/Signup", _signupDto);


        if (httpRequest.StatusCode != 201)
        {
            await ModalManager?.ShowMessageAsync("Login Error", httpRequest.Error.Errors.First())!;
        }


        else
        {
            if (LocalStorageService != null)
            {
                await LocalStorageService.SetItemAsync("token", httpRequest.Data?.accessToken);
                await LocalStorageService.SetItemAsync("email", httpRequest.Data?.email);
                await LocalStorageService.SetItemAsync("userName", httpRequest.Data?.userName);
            }

            (AuthenticationStateProvider as AuthStateProvider)?.NotifyUserLogin(httpRequest.Data?.email!);
            Client!.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", httpRequest.Data!.accessToken);

            NavManager?.NavigateTo("/");

        }
    }

}