@page "/signup"

@using StudyBuddy.WebUi.Models
@using StudyBuddy.WebUi.Utils
@using StudyBuddy.WebUi.Wrappers
@using System.Net.Http.Headers
@layout StudyBuddy.WebUi.Shared.EmptyLayout

<div class="container-fluid h-100">
    <div class="row justify-content-center align-items-center h-100">

        <div class="col col-sm-6 col-md-6 col-lg-4 col-xl-3">

            <EditForm Model="@_signupDto" OnValidSubmit="signUpProcess">
                <DataAnnotationsValidator/>
                <div class="form-group row mb-3">
                    <img src="6681204.png" width="384" height="384" alt="Trulli">

                </div>

                <div class="row mb-3">
                    <label for="inputName3" class="col-sm-2 col-form-label">Name</label>
                    <div class="col-sm-10">
                        <input @bind-value="_signupDto.UserName" type="text" class="form-control" id="inputName3">
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="inputEmail3" class="col-sm-2 col-form-label">E-mail</label>
                    <div class="col-sm-10">
                        <input @bind-value="_signupDto.Email" type="text" class="form-control" id="inputEmail3">
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="inputPassword3" class="col-sm-2 col-form-label">Password</label>
                    <div class="col-sm-10">
                        <input @bind-value="_signupDto.Password" type="password" class="form-control" id="inputPassword3">
                    </div>
                </div>
                <fieldset class="row mb-3">
                    <legend class="col-form-label col-sm-2 pt-0">Tags</legend>
                    <div class="col-sm-10">
                        @foreach (var item in taglist)
                        {
                            <div class="col-sm-10">
                                <div class="form-check">
                                        <input   class="form-check-input" type="checkbox" value="@item.Name" id="@item.Id" @onchange="eventArgs => { CheckboxClicked( item.Name,item.Id, eventArgs.Value); }">
                                        <label class="form-check-label" for="@item.Id">
                                            @item.Name
                                        </label>
                                    </div>
                                </div>
                            }
                    </div>


                </fieldset>
                            <div class="form-group row mb-3" align="right">
                                <button class="btn btn-info btn-block">SignUp</button>
                            </div>
             </EditForm> 


            
            
            

        </div>

    </div>
</div>

@code {

    [Inject]
    HttpClient? Client { get; set; }

    [Inject]
    NavigationManager? NavManager { get; set; }

    [Inject]
    ModalManager? ModalManager { get; set; }

    [Inject]
    ILocalStorageService? LocalStorageService { get; set; }

    [Inject]
    AuthenticationStateProvider? AuthenticationStateProvider { get; set; }

    private SignupDto _signupDto = new();

    [Parameter]
    public string Value { get; set; }

    

    List<TagDto> taglist=new ();


    String loadingMessage = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        var res = (await Client.GetServiceResponseAsync<List<TagDto>>("https://localhost:7042/api/Tag/all", true));
        if (res.StatusCode != 200)
        {
            Console.WriteLine(res.Error.Errors.First());
        }
        else
        {
            taglist = res.Data;
        }
    }
    
    public List<TagDto> CheckBox { get; set; } = new List<TagDto>();
    void CheckboxClicked(string name,int id, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!CheckBox.Any(x=>x.Id==id))
            {
                CheckBox.Add(new TagDto
                {
                    Id = id,
                    Name = name
                });
                foreach (var item in CheckBox)
                {
                    Console.WriteLine(item.Name);
                }
            }
        }
        else
        {
            if (CheckBox.Any(x=>x.Id==id))
            {
                CheckBox.RemoveAll(x=>x.Id==id);
            }
        }
    }
    
    
    private async Task signUpProcess()
    {
        _signupDto.TagDtos = CheckBox;
        
        
        var httpRequest = await Client.PostGetServiceResponseAsync<UserDto, SignupDto>("https://localhost:7042/api/Auth/Signup", _signupDto);


        if (httpRequest.StatusCode!=201)
        {
            await ModalManager?.ShowMessageAsync("Login Error", httpRequest.Error.Errors.First() )!;
        }


        else
        {
            if (LocalStorageService != null)
            {
                await LocalStorageService.SetItemAsync("token", httpRequest.Data?.accessToken);
                await LocalStorageService.SetItemAsync("email", httpRequest.Data?.email);
                await LocalStorageService.SetItemAsync("userName", httpRequest.Data?.userName);
            }

            (AuthenticationStateProvider as AuthStateProvider)?.NotifyUserLogin(httpRequest.Data?.email!);
            Client!.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", httpRequest.Data!.accessToken);

            NavManager?.NavigateTo("/");

        }
    }

}