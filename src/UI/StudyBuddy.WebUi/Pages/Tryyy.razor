@page "/try/{Id}"
@using Microsoft.AspNetCore.SignalR.Client
@using StudyBuddy.WebUi.Models
@using System.Net.Http.Headers
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@layout EmptyLayout
<StudyBuddy.WebUi.CustomComponents.Chatcss></StudyBuddy.WebUi.CustomComponents.Chatcss>
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet">


    
    
        <div class="col-md-12">
            <!-- start:chat room -->
            <div class="box">
                <div class="chat-room">
                    <!-- start:aside kiri chat room -->
                    <aside class="kiri-side" >
                        <div class="user-head" >
                            <i class="fa fa-comments-o"></i>
                            <h3>StudyBuddy</h3>
                        </div>
                        
                        <ul class="chat-list">
                            <li class="">
                                <h4>
                                    <i class="fa fa-list"></i>
                                    Rooms
                                </h4>

                            </li>
                            <li>
                                <a href="#chat_room.html">
                                    <i class="fa fa-rocket"></i>
                                    <span>Video</span>
                                    
                                </a>
                            </li>
                            <li >
                                <a href="/try">
                                    <i class="fa fa-rocket"></i>
                                    <span>Chat</span>
                                    
                                </a>
                            </li>

                        </ul>
                        
                    </aside>

                    <aside class="tengah-side">
                        <div class="chat-room-head" >
                            <h3>@_classroomDto?.Name</h3>
                            <form action="#" class="pull-right position">
                                <input type="text" placeholder="Search" class="form-control search-btn ">
                            </form>
                        </div>
                        <div class="portlet-body chat-widget" @ref="TextAreaRef" style="overflow-y: auto; width: auto; height: 890px;">
                            @* <div class="group-rom"> *@
                            @*     <div class="first-part odd">Admin</div> *@
                            @*     <div class="second-part">@message</div> *@
                            @*     <div class="third-part">12:19</div> *@
                            @* </div> *@

                            @if (_classroomDto is not null)
                            {
                                @foreach (var item in _classroomDto.Messages)
                                {

                                    <div class="group-rom" style=background-color:@(@item.UserId == _userId ? " #DEB887" : "#FA8072");float:@(@item.UserId == _userId ? " right" : "left")>
                                        <div class="first-part">@item.UserName</div>
                                        <div class="second-part">@item.Content</div>
                                        <div class="third-part">@item.CreatedDate</div>
                                    </div>

                                }
                                @foreach (var item in userMessages)
                                {

                                    <div class="group-rom" style=background-color:@(@item.UserId == _userId ? " #DEB887" : "#FA8072");float:@(@item.UserId == _userId ? " right" : "left")>
                                        <div class="first-part">@item.UserName</div>
                                        <div class="second-part">@item.Content</div>
                                        <div class="third-part">@item.CreateDateTime</div>
                                    </div>

                                }
                            }


                        </div>
                        <footer>
                            <div class="chat-txt">
                                <input type="text" @bind-value="message" @bind-value:event="oninput" @onkeyup="HandleInput" class="form-control">
                            </div>
                            <div class="btn-group">
                                <button type="button" class="btn btn-white" data-original-title="" title=""><i class="fa fa-meh-o"></i></button>
                                <button type="button" class="btn btn-white" data-original-title="" title=""><i class=" fa fa-paperclip"></i></button>
                            </div>
                            <button class="btn btn-danger" data-original-title="" title="" @onclick="Send" disabled="@(!IsConnected)">Send</button>
                        </footer>
                    </aside>
                    <!-- end:aside tengah chat room -->

                    <!-- start:aside kanan chat room -->
                    <aside class="kanan-side">
                        <div class="user-head">
                            <h3>Online Users</h3>
                        </div>
                        <div class="portlet-body chat-widget" style="overflow-y: auto; width: auto; height: 890px;">
                            <ul class="chat-available-user">
                                @if (_classroomDto is not null)
                                {
                                    @foreach (var item in _classroomDto.AppUsers)
                                    {
                                        <li>
                                            <a href="#chat-room.html">
                                                <i class="fa fa-circle text-success"></i>
                                                @item.userName
                                                <span class="text-muted">3h:22m</span>
                                            </a>
                                        </li>
                                    }
                                }

                            </ul>
                        </div>
                    </aside>


                </div>
            </div>
            <!-- end:chat room -->
        </div>
    


@code {
    [Inject]
    HttpClient? Client { get; set; }
    [Inject]
    NavigationManager? NavManager { get; set; }
    [Parameter]
    public string? Id { get; set; }
    private HubConnection? hubConnection;
    private string userInput = "emre";
    private string? messageInput;
    ElementReference TextAreaRef;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;
    private ClassroomDto _classroomDto;
    private List<UserMessage> userMessages = new();
    private string name = "";
    private string _userId="";
    private bool isForegin = false;
    protected override async Task OnInitializedAsync()
    {            
        name = await LocalStorageService.GetItemAsync<string>("userName");
        
        var token = await LocalStorageService.GetItemAsync<string>("token");
        _userId= new JwtSecurityToken(token).Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value;
        Client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var httpRequest = await Client.GetServiceResponseAsync<ClassroomDto>($"https://localhost:7042/api/Classroom/enter?classroomId={Id}");

        // if (httpRequest.StatusCode != 201)
        // {
        //     await ModalManager?.ShowMessageAsync("Login Error", httpRequest.Error.Errors.First())!;
        // }
        _classroomDto = httpRequest.Data;
        
        
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7165/ClassroomHub")
                , opt => { opt.AccessTokenProvider = () => Task.FromResult(token); })
            .Build();
        await hubConnection.StartAsync();

    #region GetFromSignalR

        hubConnection.On<string,string>("Notification", (userName,userId) =>
        {
            var msg = $"{userName} has joined";
            messages += msg + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });
        
        hubConnection.On<Message,string,string>("ReceiveMessage", (m,userName,userId) =>
        {
            userMessages.Add(new UserMessage{Content = m.Content,CreateDateTime = m.CreatedDate,UserName = userName,UserId = userId});
            

            StateHasChanged();
        });

    #endregion

    #region SendToSignalR

        await hubConnection.InvokeAsync("JoinClassroom", Id);

    #endregion
    }


    private async Task Send()
    {
        Console.WriteLine(message);
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("Send", new Message
            {
                GroupId = Id,
                Content = message,
                CreatedDate = DateTime.Now
            });
            
            Client.PostGetServiceResponseAsync<NoDataDto,SaveMessageDto>("https://localhost:7042/api/Message/save",new SaveMessageDto
            {
                ClassroomId = Id,
                Content = message,
                CreatedDate = DateTime.Now
            });
            
            message = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
            
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    // public async ValueTask DisposeAsync()
    // {
    //     if (hubConnection is not null)
    //     {
    //         await hubConnection.DisposeAsync();
    //     }
    // }
}