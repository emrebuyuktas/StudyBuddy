@page "/videochat/{Id}"
@using Microsoft.AspNetCore.SignalR.Client
@using StudyBuddy.WebUi.Interop
@using StudyBuddy.WebUi.Models.VideoChat

@using StudyBuddy.WebUi.Components

<div class="row h-100 pt-5">
    <div class="col-3">
        <div class="jumbotron p-4">
            <Cameras CameraChanged="OnCameraChanged" />
            <h5><i class="fas fa-video"></i> Rooms</h5>
            <div class="list-group">
                @* <div class="list-group-item d-flex justify-content-between align-items-center"> *@
                @*     <div class="input-group"> *@
                @*         <input type="text" class="form-control form-control-lg" *@
                @*                placeholder="Room name" aria-label="Room Name" disabled="@(_activeCamera is null)" *@
                @*                @bind="_roomName" @onkeydown="@(async args => await TryAddRoom(args))" /> *@
                @*         <div class="input-group-append"> *@
                @*             <button class="btn btn-lg twilio-btn-red" *@
                @*                     disabled="@(_activeCamera is null || _roomName is null)" *@
                @*                     @onclick="@(async args => await TryAddRoom(args))"> *@
                @*                 <i class="far fa-plus-square" aria-label="Create room"></i> Create *@
                @*             </button> *@
                @*         </div> *@
                @*     </div> *@
                @* </div> *@

                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <button class="btn btn-lg twilio-btn-red w-100" @onclick="@(async _ => await OnLeaveRoom())">Leave Room?</button>
                    </div>
            </div>
        </div>
    </div>
    <div class="col-9">
        <div id="participants" class="participants-grid">
            <div class="embed-responsive embed-responsive-16by9">
                <div id="camera" class="embed-responsive-item"></div>
            </div>
        </div>
    </div>
</div>
@code {
    [Inject] 
    protected IJSRuntime? JavaScript { get; set; }
    [Inject] 
    protected NavigationManager NavigationManager { get; set; } = null!;
    [Inject]
    protected HttpClient Http { get; set; } = null!;
    
    [Parameter]
    public string? Id { get; set; }
    

    List<RoomDetails> _rooms = new List<RoomDetails>();

    string? _roomName;
    string? _activeCamera;
    string? _activeRoom;
    HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _rooms = await Http.GetFromJsonAsync<List<RoomDetails>>("https://localhost:7165/api/twilio/rooms");

        if (Id is not null)
        {
            var res= await TryJoinRoom();
            if (res)
            {
                Console.WriteLine($"Joined room -- {_roomName}");
                Console.WriteLine($"Joined room -- {_activeRoom}");
            }
        }
        

    }

    async ValueTask OnLeaveRoom()
    {
        await JavaScript.LeaveRoomAsync();
        // await _hubConnection.InvokeAsync(HubEndpoints.RoomsUpdated, _activeRoom = null);
        if (!string.IsNullOrWhiteSpace(_activeCamera))
        {
            await JavaScript.StartVideoAsync(_activeCamera, "#camera");
        }
    }

    async Task OnCameraChanged(string activeCamera) => 
        await InvokeAsync(() => _activeCamera = activeCamera);

    async Task OnRoomAdded(string roomName) =>
        await InvokeAsync(async () =>
        {
            _rooms = await Http.GetFromJsonAsync<List<RoomDetails>>("https://localhost:7165/api/twilio/rooms");
            StateHasChanged();
        });

    protected async ValueTask TryAddRoom(object args)
    {
        // if (_roomName.IsNullOrEmpty())
        // {
        //     return;
        // }

        var takeAction = args switch
        {
            KeyboardEventArgs keyboard when keyboard.Key == "Enter" => true,
            MouseEventArgs _ => true,
            _ => false
        };

        if (takeAction)
        {
            var addedOrJoined = await TryJoinRoom();
            if (addedOrJoined)
            {
                _roomName = null;
            }
        }
    }

    protected async ValueTask<bool> TryJoinRoom()
    {
        // if (roomName.IsNullOrEmpty())
        // {
        //     return false;
        // }

        var jwt = await Http.GetFromJsonAsync<TwilioJwt>("https://localhost:7165/api/twilio/token");
        if (jwt?.Token is null)
        {
            return false;
        }

        var joined = await JavaScript.CreateOrJoinRoomAsync(Id, jwt.Token);
        if (joined)
        {
            _activeRoom = Id;
        }

        return joined;
    }
}