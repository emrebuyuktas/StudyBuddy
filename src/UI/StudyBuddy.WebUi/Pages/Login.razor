@page "/login"


@using StudyBuddy.WebUi.Models

@layout EmptyLayout

@using System.Net.Http.Headers
<div class="container-fluid h-100">
    <div class="row justify-content-center align-items-center h-100">

        <div class="col col-sm-6 col-md-6 col-lg-4 col-xl-3">

            <EditForm Model="@_userLoginRequest" OnValidSubmit="LoginProcess">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <input @bind-value="_userLoginRequest.Email" class="form-control form-control-lg" type="text" placeholder="E-Mail Address" />
                </div>

                <div class="form-group">
                    <input @bind-value="_userLoginRequest.Password" class="form-control form-control-lg" type="password" placeholder="Password" />
                </div>

                <div class="form-group">
                    <button class="btn btn-info btn-block">Login</button>
                </div>

            </EditForm>
            <br/>
        <button class="btn btn-primary" @onclick="IncrementCount">SignUp</button>
        </div>
        
    </div>
    
</div>

@code {
    
    private async Task IncrementCount()
    {
        NavManager?.NavigateTo("/signup");
    }
    
    [Inject]
    HttpClient? Client { get; set; }
    
    [Inject]
    NavigationManager? NavManager { get; set; }
    
    [Inject]
    ModalManager? ModalManager { get; set; }
    
    [Inject]
    ILocalStorageService? LocalStorageService { get; set; }
    
    [Inject]
    AuthenticationStateProvider? AuthenticationStateProvider { get; set; }
    
    private UserLoginRequestDto _userLoginRequest = new UserLoginRequestDto();

    private async Task LoginProcess()
    {
        var httpRequest = await Client.PostGetServiceResponseAsync<UserDto,UserLoginRequestDto>("https://localhost:7042/api/Auth/Signin", _userLoginRequest);

        if (httpRequest.StatusCode!=201)
        {
            await ModalManager?.ShowMessageAsync("Login Error", httpRequest.Error.Errors.First() )!;
        }
        
        
       else
        {
            if (LocalStorageService != null)
            {
                await LocalStorageService.SetItemAsync("token", httpRequest.Data?.accessToken);
                await LocalStorageService.SetItemAsync("email", httpRequest.Data?.email);
                await LocalStorageService.SetItemAsync("userName", httpRequest.Data?.userName);
            }

            (AuthenticationStateProvider as AuthStateProvider)?.NotifyUserLogin(httpRequest.Data?.email!);
            Client!.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", httpRequest.Data!.accessToken);
            
            NavManager?.NavigateTo("/");
            

            
            
        }
     
        
        
        
    }
}